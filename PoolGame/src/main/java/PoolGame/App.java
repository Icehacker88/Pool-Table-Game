/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PoolGame;

import PoolGame.ConfigReader.ConfigKeyMissingException;
import PoolGame.Items.Pocket;
import PoolGame.Items.PoolTable;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import javafx.util.Duration;
import org.json.simple.parser.ParseException;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

/** The JavaFX application */
public class App extends Application {

    private final double FRAMETIME = 1.0 / 60.0;
    private String cp = "/config_easy.json";

    private ConfigReader loadConfig(List<String> args) {
        String configPath;
        boolean isResourcesDir = false;
		if (args.size() > 0) {
			configPath = args.get(0);
		} else {
			// configPath = "src/main/resources/config.json";
			configPath = getChooseConfig();
            isResourcesDir = true;
		}
		// parse the file:
        ConfigReader config = null;
        try {
            config = new ConfigReader(configPath, isResourcesDir);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IOException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ParseException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ConfigKeyMissingException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        }
        return config;
    }

    @Override
    public void start(Stage stage) {
        Group root = new Group();
        Scene scene = new Scene(root);
        
        stage.setScene(scene);
        stage.setTitle("PoolGame");
        stage.show();

        Game game = new Game(loadConfig(getParameters().getRaw()));

        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());

        stage.setWidth(game.getWindowDimX()+15);
        stage.setHeight(game.getWindowDimY() +
                        Pocket.RADIUS +
                        PoolTable.POCKET_OFFSET +
                        250); // Magic number to get bottom to align


        root.getChildren().add(canvas);
        // GraphicsContext gc = canvas.getGraphicsContext2D();
        game.addDrawables(root);

        Button button1 = new Button("Easy");
        button1.relocate(300, 450);
        root.getChildren().add(button1);
        button1.setOnMouseClicked((actionEvent) -> {
            System.out.println("CLICKED Easy");
            setChooseConfig("1");
            game.table.reset();
            game.update("0");
            game.timer.stop();
            start(stage);
        });

        Button button2 = new Button("Normal");
        button2.relocate(400, 450);
        root.getChildren().add(button2);
        button2.setOnMouseClicked((actionEvent) -> {
            System.out.println("CLICKED Normal");
            setChooseConfig("2");
            game.table.reset();
            game.update("0");
            game.timer.stop();
            start(stage);
        });

        Button button3 = new Button("Hard");
        button3.relocate(500, 450);
        root.getChildren().add(button3);
        button3.setOnMouseClicked((actionEvent) -> {
            System.out.println("CLICKED Hard");
            setChooseConfig("3");
            game.table.reset();
            game.update("0");
            game.timer.stop();
            start(stage);
        });

        Button button4 = new Button("Save");
        button4.relocate(300, 550);
        root.getChildren().add(button4);
        button4.setOnMouseClicked((actionEvent) -> {
            System.out.println("CLICKED Save");
            game.table.Save();
        });

        Button button5 = new Button("Load");
        button5.relocate(400, 550);
        root.getChildren().add(button5);
        button5.setOnMouseClicked((actionEvent) -> {
            System.out.println("CLICKED Load");
            game.table.Load(game);
        });

        Button button6 = new Button("Cheat");
        button6.relocate(500, 600);
        root.getChildren().add(button6);
        button6.setOnMouseClicked((actionEvent) -> {
            System.out.println("CLICKED Cheat");
            game.table.Cheat(game);
        });

        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(FRAMETIME),
        (actionEvent) -> {
                game.tick();
            });

        timeline.getKeyFrames().add(frame);
        timeline.play();
    }

    /**
     * Set to choose which json file
     * @param l the mark of config
     */
    public void setChooseConfig(String l) {
        if (l.equals("1")) {
            cp = "/config_easy.json";
        } else if (l.equals("2")) {
            cp = "/config_normal.json";
        } else {
            cp = "/config_hard.json";
        }
    }

    /**
     * Get the config path
     * @return The String of config path
     */
    public String getChooseConfig() {
        return cp;
    }


    /**
     * The entry point of the program
     * @param args CLI arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}
